version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: arc_postgres
    environment:
      POSTGRES_DB: arc_pdf_tool
      POSTGRES_USER: arc_user
      POSTGRES_PASSWORD: arc_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U arc_user -d arc_pdf_tool"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for Celery and Caching
  redis:
    image: redis:7-alpine
    container_name: arc_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Flask Application
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: arc_api
    environment:
      - DATABASE_URL=postgresql://arc_user:arc_password@db:5432/arc_pdf_tool
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENVIRONMENT=docker
      - FLASK_APP=app.py
      - FLASK_ENV=production
      - SECRET_KEY=your-secret-key-change-in-production
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./exports:/app/exports
      - ./test_data:/app/test_data
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # PDF Processing Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: arc_worker
    environment:
      - DATABASE_URL=postgresql://arc_user:arc_password@db:5432/arc_pdf_tool
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENVIRONMENT=docker
      - PYTHONPATH=/app
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./test_data:/app/test_data
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Flower (Task Monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: arc_flower
    command: uv run celery -A core.tasks flower --port=5555 --broker=redis://redis:6379/0
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - FLOWER_BASIC_AUTH=admin:arc_flower
      - FLASK_APP=app.py
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  # MinIO for Object Storage (Optional)
  minio:
    image: minio/minio:latest
    container_name: arc_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: arc_minio
      MINIO_ROOT_PASSWORD: arc_minio_password
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # Optional Local Baserow (for development)
  baserow:
    image: baserow/baserow:1.21.2
    container_name: arc_baserow
    environment:
      BASEROW_PUBLIC_URL: http://localhost:3000
      DATABASE_URL: postgresql://baserow_user:baserow_password@baserow_db:5432/baserow
      REDIS_URL: redis://baserow_redis:6379/0
    ports:
      - "3000:3000"
    depends_on:
      - baserow_db
      - baserow_redis
    volumes:
      - baserow_data:/baserow/data
    restart: unless-stopped
    profiles:
      - baserow

  # Baserow Database
  baserow_db:
    image: postgres:15-alpine
    container_name: arc_baserow_db
    environment:
      POSTGRES_DB: baserow
      POSTGRES_USER: baserow_user
      POSTGRES_PASSWORD: baserow_password
    volumes:
      - baserow_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U baserow_user -d baserow"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    profiles:
      - baserow

  # Baserow Redis
  baserow_redis:
    image: redis:7-alpine
    container_name: arc_baserow_redis
    volumes:
      - baserow_redis_data:/data
    restart: unless-stopped
    profiles:
      - baserow

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  baserow_data:
    driver: local
  baserow_postgres_data:
    driver: local
  baserow_redis_data:
    driver: local

networks:
  default:
    name: arc_network
    driver: bridge